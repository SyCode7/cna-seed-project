input {
    courier {
      port => 5000
      transport => "tcp"
  }
}

filter {
  grok { 
	        match => ["message","%{IP:client_ip}:%{INT:client_port:int} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request:
int}/%{INT:time_queue:int}/%{INT:time_backend_connect:int}/%{INT:time_backend_response:int}/%{NOTSPACE:time_duration:int} %{INT:http_status_code:int} %{NOTSPACE:bytes_read:int} %{DATA:captured_
request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn:int}/%{INT:feconn:int}/%{INT:beconn:int}/%{INT:srvconn:int}/%{NOTSPACE:retries} %{INT:srv_queue:int}
/%{INT:backend_queue:int} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?"]	
		add_tag => [ "request" ]
  }
  metrics {
    flush_interval => 5
    clear_interval => 5
    timer => ["time_duration", "%{time_duration}"]
    add_tag => ["metric", "shortterm"]
  }
  if !("metric" in [tags]) {
    metrics {
      flush_interval => 10
      clear_interval => 10
      timer => ["time_duration", "%{time_duration}"]
      add_tag => ["metric", "longterm"]
    }
  }
  if "request" in [tags] {
    metrics {
      flush_interval => 5
      clear_interval => 1
      meter => ["events"]
      add_tag => ["metric", "requests"]
    }
  }
}

output {
  file {
    path => "/var/log/haproxy_logstash.%{+yyyy.MM.dd.HH}"
  }
  elasticsearch {}
}
