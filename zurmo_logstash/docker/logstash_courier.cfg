input {
    courier {
      port => 5000
      transport => "tcp"
  }
}

filter {
  if "loadbalancer" in [type] {
        grok {
                patterns_dir => "/logstash/patterns"
                match => ["message", "%{CUSTOMHAPROXY}"]
                add_tag => [ "request" ]
        }
        metrics {
                flush_interval => 5
                clear_interval => 5
                timer => ["time_duration", "%{time_duration}"]
                add_tag => ["metric", "shortterm" ]
                add_field => {
                        "metric_period" => "short_term"
                }
        }
        if !("metric" in [tags]) {
           metrics {
                flush_interval => 10
                clear_interval => 10
                timer => ["time_duration", "%{time_duration}"]
                add_tag => ["metric", "longterm"]
                add_field => {"metric_period" => "long_term"}
          }
        }
        if "request" in [tags] {
                metrics {
                        flush_interval => 5
                        clear_interval => 1
                        meter => ["events"]
                        add_tag => ["metric", "requests"]
                }
        }
  }
  if "webserver" in [type] {
        if "system_metrics" in [category] {
                if "disk" in [resource] and "I/O" in [disk-category] {
                        grok {
                                match => ["message", "%{NOTSPACE:epoch},%{BASE16FLOAT:read:float},%{BASE16FLOAT:write:float}"]
                        }
                } else {
                        grok {
                                match => ["message", "%{NOTSPACE:epoch},%{BASE16FLOAT:avg1m:float},%{BASE16FLOAT:avg10m:float},%{BASE16FLOAT:avg15m:float}
"]
                                match => ["message", "%{NOTSPACE:epoch},%{BASE16FLOAT:value:float}"]
                                patterns_dir => ["/logstash-1.4.2.tar.gz/logstash-1.4.2/patterns", "/logstash/patterns"]
                        }
                }
                date {
                        match => ["epoch", "UNIX"]
                        target => "time_collected"
                }
        } else {
                grok {
                                        match => ["message", "%{COMBINEDAPACHELOG}"]
                                        match => ["message", "%{CUSTOMAPACHE}"]
                                        match => ["message", "%{ZURMO}"]
                                        patterns_dir => ["/logstash-1.4.2.tar.gz/logstash-1.4.2/patterns", "/logstash/patterns"]
                }
        }
  }
  if "memcached" in [type] {
        grok {
                match => ["message", "%{MEMCACHED}"]
                patterns_dir => ["/logstash/patterns"]
                overwrite => [ "message" ]
        }
  }
}

output {
   if "cpu" in [resource] or "memory" in [resource] {
        etcd {
                etcd_ip => "<ETCD_IP>"
                etcd_port => <ETCD_PORT> 
                path => "/services/[type]/[service-id]/metrics/[resource]/[metric]/[time_collected]"
                value_field => "value"
                ttl => 60
        }
   }
   if "short_term" in [metric_period] {
        etcd {
                etcd_ip => "<ETCD_IP>"
                etcd_port => <ETCD_PORT> 
                path => "/services/loadbalancer/metrics/response_time/[@timestamp]"
                ttl => 60
        }
   }
  elasticsearch {}
}
